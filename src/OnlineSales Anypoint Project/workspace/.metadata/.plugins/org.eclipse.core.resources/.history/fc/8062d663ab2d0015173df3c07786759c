package aggregators;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.mule.DefaultMuleEvent;
import org.mule.api.MuleEvent;
import org.mule.api.MuleException;
import org.mule.api.MuleMessage;
import org.mule.api.routing.AggregationContext;
import org.mule.routing.AbstractCorrelationAggregator;
import org.mule.routing.AggregationException;
import org.mule.routing.AggregationStrategy;
import org.mule.routing.EventGroup;

import entities.product;

public class CompareAggregator implements AggregationStrategy {
	
	@Override
	public MuleEvent aggregate(AggregationContext context) throws MuleException {
		
		 // mule event that will be rewritten
		 MuleEvent originalEvent = context.getOriginalEvent();
		 // message which payload will be rewritten
		 MuleMessage message = originalEvent.getMessage();
		
		 List<product> productsList = new ArrayList<product>();
		// MuleEvent result = null;
	       
		
		 //int countTotal = context.collectEventsWithExceptions().size();
		 //int countSucess = context.collectEventsWithoutExceptions().size();
		 int index =0;
	     for (MuleEvent event : context.collectEventsWithoutExceptions()) {	    	
	    	 //productsList.addAll(this.getProductList(event, index));    	 
	    	 index++;
	     }
	     
	 	//message.setPayload(productsList.iterator());
	     message.setPayload(productsList);	     
	   
	     return new DefaultMuleEvent(message, originalEvent); 
	     //return result;
		
	}
}




/*extends AbstractCorrelationAggregator{

	@Override
	protected MuleEvent aggregateEvents(EventGroup events)
			throws AggregationException {

		String message;
		try
		{
			for (Iterator<MuleEvent> iterator = events.iterator(); iterator.hasNext();)
			{
				MuleEvent event = iterator.next();
				message = event.transformMessageToString();
				
				//lookAtMe = event.transformMessageToString();
				
	
				//buffer.append(event.transformMessageToString());
			}
		}
		catch (Exception e)
		{
			throw new AggregationException(events, null, e);}
		
		return new DefaultMuleEvent();
		//return new DefaultMuleEvent(new DefaultMuleMessage(buffer.toString(), muleContext), events.getMessageCollectionEvent());
	}

}*/
